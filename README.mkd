Jentry
=======

Jentry is a light-weight Java framework designed for efficient store and
processing of flows of information. Designed originally for the financial
industry, the main purpose is for processing millions of records in memory in
sub-second times.

## Preface

I originally encountered the ideas for the Jentry framework while developing a
similar framework at a multinational investment bank. The framework's purpose
was to greatly improve the performance of many trading applications. This style
of framework had proven successful in before in other financial institutions,
and many of the other developers in my group had been 'poached' from successful
frameworks of the past. For about two years we worked on the framework, with
approximately 20 active groups using the frameworks in their applications.

## A Few Basic Principles of Jentry

### Memory efficiency

Jentry is array-based and based on the primitive arrays. When starting to store
millions of record in memory, Object allocation and garbage collection can often
become a large drain (in many cases the largest) on resources. In this way,
Jentry Collections are similar to the GNU trove framework. The collections are
designed to be faster and use less memory than the standard JDK collections.
Trove explains this tenant in a very succinct way in its second objective:

> Whenever possible, provide the same collections support for primitive types.
> This gap in the JDK is often addressed by using the "wrapper" classes
> (java.lang.Integer, java.lang.Float, etc.) with Object-based collections.
> For most applications, however, collections which store primitives directly
> will require less space and yield significant performance gains.

### Collection 'Compactness' witn Indirection

Jentry collections have a unique wrinkle in the contract between the user.

The simplest way to show the difference is to show an example:

Lets say you wanted to store a few million orders in memory in Java (for my example I will assume they are financial orders).
The financial orders have well-defined fields and unique ids. An easy way to do
this in Java would be to define a POJO, and create a data store of some sort of
HashMap to search them by id, something like:

	HashMap<Integer, Order> orderStore = new HashMap<Integer,Order>(1000000);
	for (int i=0; i<1000000; i++)
	{
		Order = new Order(id, price, etc....);
		orderStore.put(id, Order);
	}

This is all fine and good, and would probably work reasonably well up to a
point, but start to do a ton of actual work with the data store, and you encounter a
very common problem that GC time and PermGen space needs to be increased by
crazy amounts. Common solutions of duct tape and massive caching applications
can only help so much.

Jentry collections uses a convention of 'handles' to the data. These 'handles'
are also called 'entries' (hence, Jentry), but really are just slots in an
array. Now we ditch the POJOs, and use a slightly different method of storage of
the Orders:

	HashSetInt orderStore = new HashSetInt(1000000);
	long[] price = new long[1000000];
	int[] instrumentId = int[1000000];
	etc..., for each order attribute

	for (int i=0; i<1000000; i++)
	{
		int entry = orderStore.insert(id);
		price[entry] = price;
		instrument[entry] instrumentId;
		etc... for each attribute
	}

Now the difference here is obviously the ditching of the POJOS, but in this
case, these entries are 'compact'. That means that the first entry for your
first order will be 0, followed by 1, 2, etc.... We also make a contract with
the Collection that if you retrieve an item by an entry, you get the exact item
you inserted. (Example of retrieval and modification).

This is a long winded way of implementation of column based storage, however combined with other constructs, it allows users that want to use the other niceties of Java to quickly form an efficient data store. If the entry formation will not be used as an ID, or if attempting to achieve efficiency goals by replacing too many Objects, consider GNU trove. GNU trove does the simple goal of replacing tons of Wrapper Object classes with their primitive types, and attempts to maintain the same contract as the regular JDK classes.


