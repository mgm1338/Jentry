<project name="Jentry" default="" basedir="src">
    <property name="src" location="."/>
    <property name="gen" location="main/generated"/>
    <property name="build" location="build"/>
    <property name="dist" location="dist"/>

    <target name="initialize">
        <delete dir="${gen}"/>
    </target>
    <target name="generate" depends="initialize">
        <generateSpecificTypes fileBase="ArrayFactory"
                               package="main\core\array\factory"/>
        <generateSpecificTypes fileBase="Comparator"
                               package="main\core\util\comparator"/>
        <generateSpecificTypes fileBase="Collection"
                               package="main\collections"/>
        <generateSpecificTypes fileBase="HashSet"
                               package="main\collections\hash\set"/>
        <generateSpecificTypes fileBase="Heap"
                               package="main\collections\heap"/>

        <!--//TESTS-->
        <generateSpecificTypes fileBase="TestHashSet"
                               package="test\collections\hash\set"/>
        <generateSpecificTypes fileBase="TestUtils"
                               package="test\util"/>
        <generateSpecificTypes fileBase="TestHeap"
                               package="test\collections\heap"/>

         <!--KEY VALS-->
        <!--<generateKeyValTypes fileBase="Heap" package="main\collections\heap" />-->

        <!--DELETE BOOLEAN HASH SET-->
        <delete file="main\collections\hash\set\HashSetBool.java"/>
        <delete file="main\collections\heap\HeapBool.java"/>
        <delete file="test\collections\heap\TestHeapBool.java"/>
        <delete file="test\collections\hash\set\TestHashSetBool.java"/>

    </target>

    <macrodef name="generateSpecificTypes"
              description="Generate Each Type of Key">
        <attribute name="fileBase"/>
        <attribute name="package"/>
        <sequential>
            <generateKeys fileBase="@{fileBase}" package="@{package}"
                          keyTypeName="Bool" keyType="boolean"/>
            <generateKeys fileBase="@{fileBase}" package="@{package}"
                          keyTypeName="Char" keyType="char"/>
            <generateKeys fileBase="@{fileBase}" package="@{package}"
                          keyTypeName="Byte" keyType="byte"/>
            <generateKeys fileBase="@{fileBase}" package="@{package}"
                          keyTypeName="Short" keyType="short"/>
            <generateKeys fileBase="@{fileBase}" package="@{package}"
                          keyTypeName="Int" keyType="int"/>
            <generateKeys fileBase="@{fileBase}" package="@{package}"
                          keyTypeName="Float" keyType="float"/>
            <generateKeys fileBase="@{fileBase}" package="@{package}"
                          keyTypeName="Double" keyType="double"/>
            <generateKeys fileBase="@{fileBase}" package="@{package}"
                          keyTypeName="Long" keyType="long"/>
            <generateKeys fileBase="@{fileBase}" package="@{package}"
                          keyTypeName="CharSequence" keyType="CharSequence"/>
            <generateKeys fileBase="@{fileBase}" package="@{package}"
                          keyTypeName="Object" keyType="Object"/>
        </sequential>
    </macrodef>


    <macrodef name="generateKeyValTypes"
              description="Generate Each Type of Key">
        <attribute name="fileBase"/>
        <attribute name="package"/>
        <sequential>
            <generateSpecificValueTypes fileBase="@{fileBase}"
                                        package="@{package}"
                                        valueTypeName="Bool"
                                        valueType="boolean"/>
            <generateSpecificValueTypes fileBase="@{fileBase}"
                                        package="@{package}"
                                        valueTypeName="Char" valueType="char"/>
            <generateSpecificValueTypes fileBase="@{fileBase}"
                                        package="@{package}"
                                        valueTypeName="Byte" valueType="byte"/>
            <generateSpecificValueTypes fileBase="@{fileBase}"
                                        package="@{package}"
                                        valueTypeName="Short"
                                        valueType="short"/>
            <generateSpecificValueTypes fileBase="@{fileBase}"
                                        package="@{package}"
                                        valueTypeName="Int" valueType="int"/>
            <generateSpecificValueTypes fileBase="@{fileBase}"
                                        package="@{package}"
                                        valueTypeName="Float"
                                        valueType="float"/>
            <generateSpecificValueTypes fileBase="@{fileBase}"
                                        package="@{package}"
                                        valueTypeName="Double"
                                        valueType="double"/>
            <generateSpecificValueTypes fileBase="@{fileBase}"
                                        package="@{package}"
                                        valueTypeName="Long" valueType="long"/>
            <generateSpecificValueTypes fileBase="@{fileBase}"
                                        package="@{package}"
                                        valueTypeName="CharSequence"
                                        valueType="CharSequence"/>
            <generateSpecificValueTypes fileBase="@{fileBase}"
                                        package="@{package}"
                                        valueTypeName="Object"
                                        valueType="Object"/>
        </sequential>
    </macrodef>


    <macrodef name="generateSpecificValueTypes"
              description="Generate Each Type of Key">
        <attribute name="fileBase"/>
        <attribute name="package"/>
        <attribute name="valueTypeName"/>
        <attribute name="valueType"/>
        <sequential>
            <generateKeysValues fileBase="@{fileBase}" package="@{package}"
                                keyTypeName="Bool" keyType="boolean"
                                valueType="@{valueType}"
                                valueTypeName="@{valueTypeName}"/>
            <generateKeysValues fileBase="@{fileBase}" package="@{package}"
                                keyTypeName="Char" keyType="char"
                                valueType="@{valueType}"
                                valueTypeName="@{valueTypeName}"/>
            <generateKeysValues fileBase="@{fileBase}" package="@{package}"
                                keyTypeName="Byte" keyType="byte"
                                valueType="@{valueType}"
                                valueTypeName="@{valueTypeName}"/>
            <generateKeysValues fileBase="@{fileBase}" package="@{package}"
                                keyTypeName="Short" keyType="short"
                                valueType="@{valueType}"
                                valueTypeName="@{valueTypeName}"/>
            <generateKeysValues fileBase="@{fileBase}" package="@{package}"
                                keyTypeName="Int" keyType="int"
                                valueType="@{valueType}"
                                valueTypeName="@{valueTypeName}"/>
            <generateKeysValues fileBase="@{fileBase}" package="@{package}"
                                keyTypeName="Float" keyType="float"
                                valueType="@{valueType}"
                                valueTypeName="@{valueTypeName}"/>
            <generateKeysValues fileBase="@{fileBase}" package="@{package}"
                                keyTypeName="Double" keyType="double"
                                valueType="@{valueType}"
                                valueTypeName="@{valueTypeName}"/>
            <generateKeysValues fileBase="@{fileBase}" package="@{package}"
                                keyTypeName="Long" keyType="long"
                                valueType="@{valueType}"
                                valueTypeName="@{valueTypeName}"/>
            <generateKeysValues fileBase="@{fileBase}" package="@{package}"
                                keyTypeName="CharSequence"
                                keyType="CharSequence"
                                valueType="@{valueType}"
                                valueTypeName="@{valueTypeName}"/>
            <generateKeysValues fileBase="@{fileBase}" package="@{package}"
                                keyTypeName="Object" keyType="Object"
                                valueType="@{valueType}"
                                valueTypeName="@{valueTypeName}"/>
        </sequential>
    </macrodef>

    <macrodef name="generateKeys">
        <attribute name="keyTypeName"/>
        <attribute name="keyType"/>
        <attribute name="fileBase"/>
        <attribute name="package"/>
        <sequential>
            <copy file="${src}/@{package}/@{fileBase}_KeyTypeName_.java"
                  tofile="@{package}/@{fileBase}@{keyTypeName}.java">
                <filterset begintoken="_" endtoken="_">
                    <filter token="KeyTypeName" value="@{keyTypeName}"/>
                    <filter token="key" value="@{keyType}"/>
                </filterset>
            </copy>
        </sequential>
    </macrodef>

    <macrodef name="generateKeysValues">
        <attribute name="keyTypeName"/>
        <attribute name="keyType"/>
        <attribute name="valueTypeName"/>
        <attribute name="valueType"/>
        <attribute name="fileBase"/>
        <attribute name="package"/>
        <sequential>
            <copy file="${src}/@{package}/@{fileBase}_KeyTypeName_.java"
                  tofile="@{package}/@{fileBase}@{keyTypeName}{valueTypeName}.java">
                <filterset begintoken="_" endtoken="_">
                    <filter token="KeyTypeName" value="@{keyTypeName}"/>
                    <filter token="key" value="@{keyType}"/>
                    <filter token="ValueTypeName" value="@{valueTypeName}"/>
                    <filter token="val" value="@{valueType}"/>
                </filterset>
            </copy>
        </sequential>
    </macrodef>


</project>